#!/usr/bin/env python3

'''
surplus
'''
import sys
import os
import subprocess
import signal
import datetime
from PyQt4 import QtGui, QtCore


from PluginTreeBuilder import *
from PluginList import *
from FileList import *
from config import *

def handler(*args):
    '''saves the config and kills play before exiting'''
    subprocess.call(['pkill', 'play'])
    print('caught exit signal')
    if not config:
        print('error, config not saved')
    else:
        print('saving config')
        with open(config_file, 'w') as config_file_settings:
            yaml.dump(config, config_file_settings)
    print('exiting')
    sys.exit(0)

def getLength(a_file):
    x = (FFMPEG_BIN, '-i', str(a_file))
    try:
        output = subprocess.check_output(x, stderr=subprocess.STDOUT)
    except subprocess.CalledProcessError as err:
        output = str(err)
    finished = output.split('\n')
    for line in finished:
        if "Duration" in line:
            finished = line
            break
    return datetime.datetime.strptime(
        finished.split()[1][:-1], '%H:%M:%S.%f'
        ).time()

class PlayView(QtGui.QGraphicsView):
    def __init__(self):
        QtGui.QGraphicsView.__init__(self)
        self.setBackgroundBrush(QtGui.QColor(34, 34, 34))
        self.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)
        self.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)


        self.scene = QtGui.QGraphicsScene(self)
        #self.item = QtGui.QGraphicsLineItem(0, 0, 0, 20)
        self.rect = QtGui.QGraphicsRectItem(0, 0, 100, 20)
        self.rect.setPen(QtGui.QPen(QtGui.QColor(0, 0, 0, 0)))
        #self.scene.addItem(self.item)
        self.scene.addItem(self.rect)
        self.setScene(self.scene)
        self.setAlignment(QtCore.Qt.AlignLeft)

        self.path = None

    def resizeEvent(self, event):
        self.fitInView(self.rect)
        QtGui.QGraphicsView.resizeEvent(self, event)

    def mil(self, length):
        return length.hour*3.6e6 + \
            length.minute * 6e4 + \
            length.second * 1000 + \
            length.microsecond * .001

    def loadFile(self, a_file):
        if config['Show Waveform']:
            if self.path:
                self.scene.removeItem(self.path)
                self.path = None
            if a_file:
                #length = self.mil(getLength(a_file))
                #if length < 30e3:
                thread = waveThread(a_file)
                thread.finished.connect(self.loadWave)
                thread.start()

    def loadWave(self, arr):
        self.path = waveForm(arr)
        clearpen = QtGui.QPen(QtGui.QColor(70, 122, 100, 150))
        self.path.setPen(clearpen)
        self.scene.addItem(self.path)

        # self.tl = QtCore.QTimeLine(length)
        # self.tl.setFrameRange(0, length/10)
        # self.a = QtGui.QGraphicsItemAnimation()
        # self.a.setItem(self.item)
        # self.a.setTimeLine(self.tl)

        # self.a.setPosAt(1, QtCore.QPointF(100, 0))

    def animate(self):
        self.tl.start()

# remnants of the qgraphicsview
#    # def paint(self, painter, option, widget=None):
#    #     QtGui.QGraphicsView.paint(self, painter, paint_option, widget)

class InputWidget(QtGui.QComboBox):
    path_updated = QtCore.pyqtSignal(str)
    tab_pressed = QtCore.pyqtSignal()
    esc_pressed = QtCore.pyqtSignal()

    def __init__(self):
        QtGui.QComboBox.__init__(self)
        self.setEditable(True)
        self.setInsertPolicy(QtGui.QComboBox.NoInsert)
        self.addItems(config['Places'])
        self.addItem('Recent')
        self.resize()
        self.activated.connect(self.updatePath)

    def updatePath(self, index):
        self.path_updated.emit(self.currentText())

    def event(self, event):
        if event.type() == QtCore.QEvent.KeyPress:
            if event.key() == QtCore.Qt.Key_Tab:
                self.tab_pressed.emit()
                return True
            elif event.key() == QtCore.Qt.Key_Escape:
                self.setEditText(self.prev_text)
                self.esc_pressed.emit()
                return True
        return QtGui.QComboBox.event(self, event)

    def keyPressEvent(self, event):
        QtGui.QComboBox.keyPressEvent(self, event)
        if event.key() == QtCore.Qt.Key_Return:
            if os.path.isdir(self.currentText()):
                self.path_updated.emit(self.currentText())
            self.esc_pressed.emit()

    def focusInEvent(self, event):
        self.prev_text = self.currentText()
        QtGui.QComboBox.focusInEvent(self, event)

    def resize(self):
        font = QtGui.QFontMetrics(self.font())
        max_width = 40 + max((font.width(place) for place in config['Places']))
        self.view().setMinimumWidth(max_width)

class MainWindow(QtGui.QWidget):

    def __init__(self):
        QtGui.QWidget.__init__(self)
        # self.setAttribute(QtCore.Qt.WA_AcceptTouchEvents)
        self.setWindowFlags(QtCore.Qt.Dialog)
        self.setWindowTitle('Surplus')

        self._initWidgets()
        self._initFilesTab()
        self._initPluginsTab()
        self._initMainLayout()

        self.addTab(self.tab1, "browser")
        self.addTab(self.tab2, "plugins")

        self._initConnections()
        self.files.setFocus()
        self.inputBox.editTextChanged.connect(self.parseInput)

    def _initWidgets(self):
        self.widgetStack = QtGui.QStackedWidget()

        self.tabBar = QtGui.QTabBar()
        self.tabBar.setFocusPolicy(QtCore.Qt.NoFocus)
        self.tabBar.currentChanged.connect(self.switchTabs)
        self.tabBar.setShape(QtGui.QTabBar.RoundedWest)
        self.tabBar.updateGeometry()
        
        self.scrollBar = QtGui.QScrollBar()
        self.scrollBar.setFocusPolicy(QtCore.Qt.NoFocus)
        self.scrollBar.rangeChanged.connect(self.scrollHide)
        self.blank = QtGui.QWidget(parent=self)
        self.blank.setFocusPolicy(QtCore.Qt.NoFocus)
        self.blank.hide()

        self.placesButton = QtGui.QPushButton("+")
        self.placesButton.setFocusPolicy(QtCore.Qt.NoFocus)
        self.placesButton.sizeHint = self.placesButtonSizeHint

        self.tabLayoutBox = QtGui.QVBoxLayout()
        self.tabLayoutBox.setContentsMargins(0,0,0,0)
        self.tabLayoutBox.setSpacing(0)
        self.tabLayoutBox.setMargin(0)
        self.tabLayoutBox.setAlignment(QtCore.Qt.AlignLeft)
        self.tabLayoutBox.addWidget(self.placesButton)
        self.tabLayoutBox.addWidget(self.tabBar)
        self.tabLayoutBox.addWidget(self.scrollBar)
        self.tabLayoutBox.addWidget(self.blank)

    def _initMainLayout(self):
        mainHBox = QtGui.QHBoxLayout()
        mainHBox.setContentsMargins(0,0,0,0)
        mainHBox.setMargin(0)
        mainHBox.setSpacing(0)
        mainHBox.addLayout(self.tabLayoutBox)
        mainHBox.addWidget(self.widgetStack)

        mainVBox = QtGui.QVBoxLayout()
        mainVBox.addWidget(self.inputBox)
        mainVBox.addLayout(mainHBox)
        self.setLayout(mainVBox)

    def _initFilesTab(self):
        self.tab1 = QtGui.QWidget()
        self.inputBox = InputWidget()
        self.inputBox.setFrame(QtGui.QFrame.NoFrame)
        self.files = FileList(config['Default Folder'])
        self.files.setVerticalScrollBar(self.scrollBar)
        self.tab1.parseInput = self.files.parseInput

        self.playCheck = QtGui.QCheckBox()
        self.waveRect = PlayView()
        self.waveRect.setMaximumHeight(20)
        self.waveRect.setFrameShape(QtGui.QFrame.NoFrame)
        hBox = QtGui.QHBoxLayout()
        hBox.addWidget(self.playCheck)
        hBox.addWidget(self.waveRect)

        tab1Layout = QtGui.QVBoxLayout()
        tab1Layout.setContentsMargins(0, 0, 0, 0)
        tab1Layout.setSpacing(0)
        tab1Layout.setMargin(0)
        tab1Layout.addWidget(self.files)
        tab1Layout.addLayout(hBox)
        self.tab1.setLayout(tab1Layout)

    def _initPluginsTab(self):
        build = PluginTreeBuilder()
        self.tab2 = PluginList(build.root)
        self.tab2.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)

    def _initConnections(self):
        self.files.tab_pressed.connect(self.switchTabs)
        self.files.slash_pressed.connect(self.focusPath)
        self.inputBox.tab_pressed.connect(self.switchTabs)
        self.inputBox.esc_pressed.connect(self.focusList)

        self.files.path_updated.connect(self.updatePath)
        self.inputBox.path_updated.connect(self.updateList)
        self.files.path_updated.emit(config['Default Folder'])

        self.files.sample_selected.connect(self.waveRect.loadFile)
        self.playCheck.stateChanged.connect(self.files.enablePlayback)

        self.tab2.tab_pressed.connect(self.switchTabs)
        self.tab2.slash_pressed.connect(self.focusPath)

        if config['Play']:
            self.playCheck.setChecked(True)
            self.playCheck.stateChanged.emit(QtCore.Qt.Checked)
        else:
            self.playCheck.setChecked(False)
            self.playCheck.stateChanged.emit(QtCore.Qt.Unchecked)

        self.placesButton.clicked.connect(self.modifyPlaces)

    def parseInput(self, text):
        self.widgetStack.currentWidget().parseInput(text)

    def updateButton(self, text):
        if os.path.realpath(os.path.abspath(text)) == \
                os.path.realpath(os.path.abspath(config['Default Folder'])) or \
                text == 'Recent':
            self.placesButton.setEnabled(False)
            return
        self.placesButton.setEnabled(True)
        path = os.path.realpath(os.path.abspath(text))
        places = (os.path.realpath(sym) for sym in config['Places'])
        text = '-' if path in places else '+'
        self.placesButton.setText(text)

    def modifyPlaces(self):
        path = os.getcwd()
        places = [os.path.realpath(sym) for sym in config['Places']]
        if path in places:
            self.inputBox.removeItem(places.index(path))
            config['Places'].pop(places.index(path))
            self.placesButton.setText('+')
        else:
            config['Places'].append(path)
            self.inputBox.insertItem(config['Places'].index(path), path)
            self.placesButton.setText('-')
        self.inputBox.resize()

    def scrollHide(self, a, b):
        if a==b and not self.scrollBar.isHidden():
            self.scrollBar.hide()
            self.blank.show()
        elif self.scrollBar.isHidden():
            self.scrollBar.show()
            self.blank.hide()

    def addTab(self, widget, name):
        self.widgetStack.addWidget(widget)
        self.tabBar.addTab(name)

    def sizeHint(self):
        return QtCore.QSize(220, 500)

    def placesButtonSizeHint(self):
        return QtCore.QSize(20,20)


    def event(self, event):
        if type(event) == QtGui.QKeyEvent \
                and event.key() == QtCore.Qt.Key_Tab:
                return True
        else:
            return super(MainWindow, self).event(event)

    def switchTabs(self, index=None):
        if not index:
            index = (self.widgetStack.currentIndex()+1) % self.widgetStack.count()
        self.tabBar.setCurrentIndex(index)
        self.widgetStack.setCurrentIndex(index)
        # have to move scrollbar too

    def focusList(self):
        self.widgetStack.currentWidget().setFocus(QtCore.Qt.ShortcutFocusReason)

    def focusPath(self):
        self.inputBox.setFocus(QtCore.Qt.ShortcutFocusReason)

    def updatePath(self, text):
        self.inputBox.setEditText(text)
        self.updateButton(str(text).strip())

    def updateList(self, text): 
        self.files.updateList(str(text).strip())
        self.updateButton(str(text).strip())

if __name__ == '__main__':
    for sig in [signal.SIGTERM, signal.SIGINT, signal.SIGHUP, signal.SIGQUIT]:
        signal.signal(sig, handler)
    app = QtGui.QApplication(sys.argv)

    with open(config['Stylesheet'], 'r') as content_file:
        content = content_file.read()
    #stylesheet = QtCore.QLatin1String(content)
    stylesheet = content
    app.setStyleSheet(stylesheet)
    app.aboutToQuit.connect(handler)

    main = MainWindow()
    main.show()
    sys.exit(app.exec_())
