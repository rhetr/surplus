#!/usr/bin/env python2

'''
surplus
'''
import sys
import os
import subprocess
import signal
import datetime
from PyQt4 import QtGui, QtCore
from peaks import *
from config import *

def handler(*args):
    '''saves the config and kills play before exiting'''
    subprocess.call(['pkill', 'play'])
    print 'caught exit signal'
    if not config:
        print 'error, config not saved'
    else:
        print 'saving config'
        with open(config_file, 'wb') as config_file_settings:
            yaml.dump(config, config_file_settings)
    print 'exiting'
    sys.exit(0)

def getLength(a_file):
    x = [FFMPEG_BIN, '-i', str(a_file)]
    try:
        output = subprocess.check_output(x, stderr=subprocess.STDOUT)
    except Exception, e:
        output = str(e.output)
    finished = output.split('\n')
    for line in finished:
        if "Duration" in line:
            finished = line
            break
    return datetime.datetime.strptime(
        finished.split()[1][:-1], '%H:%M:%S.%f'
        ).time()


def play(a_file):
    return subprocess.Popen(['play', '-q', a_file],
                            stdout=subprocess.PIPE,
                            preexec_fn=os.setsid)


class playView(QtGui.QGraphicsView):
    def __init__(self):
        QtGui.QGraphicsView.__init__(self)
        self.setBackgroundBrush(QtGui.QColor(34, 34, 34))
        self.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)
        self.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)


        self.scene = QtGui.QGraphicsScene(self)
        #self.item = QtGui.QGraphicsLineItem(0, 0, 0, 20)
        self.rect = QtGui.QGraphicsRectItem(0, 0, 100, 20)
        self.rect.setPen(QtGui.QPen(QtGui.QColor(0, 0, 0, 0)))
        #self.scene.addItem(self.item)
        self.scene.addItem(self.rect)
        self.setScene(self.scene)
        self.setAlignment(QtCore.Qt.AlignLeft)

        self.path = None

    def resizeEvent(self, event):
        self.fitInView(self.rect)
        QtGui.QGraphicsView.resizeEvent(self, event)

    def mil(self, length):
        return length.hour*3.6e6 + \
            length.minute * 6e4 + \
            length.second * 1000 + \
            length.microsecond * .001

    def loadFile(self, a_file):
        if config['Show Waveform']:
            if self.path:
                self.scene.removeItem(self.path)
                self.path = None
            if a_file:
                length = self.mil(getLength(a_file))
                if length < 30e3:
                    thread = waveThread(a_file)
                    thread.finished.connect(self.loadWave)
                    thread.start()

    def loadWave(self, arr):
        self.path = waveForm(arr)
        clearpen = QtGui.QPen(QtGui.QColor(70, 122, 100, 150))
        self.path.setPen(clearpen)
        self.scene.addItem(self.path)

        # self.tl = QtCore.QTimeLine(length)
        # self.tl.setFrameRange(0, length/10)
        # self.a = QtGui.QGraphicsItemAnimation()
        # self.a.setItem(self.item)
        # self.a.setTimeLine(self.tl)

        # self.a.setPosAt(1, QtCore.QPointF(100, 0))

    def animate(self):
        self.tl.start()

class listItem(QtGui.QListWidgetItem):
    def __init__(self, text, is_file=True):
        QtGui.QListWidgetItem.__init__(self)
        self.is_file = is_file
        self.text = text
        self.text += '/' if not is_file else ''
        self.setText(self.text)
        self.current_item = None
        self.playing = None

    def playSample(self):
        if self.playing:
            os.killpg(self.playing.pid, signal.SIGTERM)
        self.playing = play(self.text)

class fileList(QtGui.QListWidget):
    tab_pressed = QtCore.pyqtSignal()
    slash_pressed = QtCore.pyqtSignal()
    path_updated = QtCore.pyqtSignal(str)
    sample_playing = QtCore.pyqtSignal(bool)
    sample_selected = QtCore.pyqtSignal(str)

    def __init__(self, path, parent=None):
        QtGui.QListWidget.__init__(self, parent)
        self.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)
        self.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)
        self.setDragDropMode(QtGui.QAbstractItemView.DragOnly)
        self.parent = parent

        self.playback_enabled = False
        self.current_item = None
        self.select_flag = False
        self.changeDir(path)

        self.currentRowChanged.connect(self.itemSelected)
        self.itemClicked.connect(self.activatePressed)

    def updateRecent(self, path):
        if path in config['Recent']: config['Recent'].remove(path)
        config['Recent'].append(path)
        if len(config['Recent']) > 50: config['Recent'].pop(0)

    def mimeData(self, item):
        path = os.path.abspath(str(item[0].text))
        mimeData = QtCore.QMimeData()
        mimeData.setUrls([QtCore.QUrl.fromLocalFile(path)])
        if os.path.isfile(path): self.updateRecent(path)
        return mimeData

    def keyPressEvent(self, event): #NOQA
        if type(event) == QtGui.QKeyEvent:
            #if event.key() == QtCore.Qt.Key_Tab: #not working
            #    self.tab_pressed.emit()
            #    return 1
            if event.key() == QtCore.Qt.Key_Slash:
                self.slash_pressed.emit()
            elif event.key() == QtCore.Qt.Key_Escape:
                self.changeDir(os.getcwd())
            elif event.key() == QtCore.Qt.Key_Delete:
                if os.path.abspath(self.current_item.text) in config['Recent']:
                    config['Recent'].remove(os.path.abspath(self.current_item.text))
                    self.changeDir('Recent')
            elif event.key() == QtCore.Qt.Key_K:
                event = QtGui.QKeyEvent(event.type(), QtCore.Qt.Key_Down, QtCore.Qt.NoModifier)
            elif event.key() == QtCore.Qt.Key_L:
                event = QtGui.QKeyEvent(event.type(), QtCore.Qt.Key_Up, QtCore.Qt.NoModifier)
            elif event.key() == QtCore.Qt.Key_Left \
                    or event.key() == QtCore.Qt.Key_J:
                self.changeDir('..')
            elif event.key() == QtCore.Qt.Key_Right \
                    or event.key() == QtCore.Qt.Key_Semicolon:
                if not self.current_item.is_file:
                    self.changeDir(self.selectedItems()[0].text)
            elif event.key() == QtCore.Qt.Key_Return \
                    or event.key() == QtCore.Qt.Key_Space:
                if self.current_item.is_file: self.current_item.playSample()
                else: self.changeDir(self.current_item.text)
        QtGui.QListWidget.keyPressEvent(self, event)

    def itemSelected(self, row):
        self.current_item = self.item(row)
        if self.current_item and self.current_item.is_file:
            self.sample_selected.emit(self.current_item.text)
            if self.playback_enabled: self.current_item.playSample()
        self.select_flag = True

    def activatePressed(self, item):
        if self.select_flag:
            self.select_flag = False
        elif self.current_item:
            if self.current_item.is_file and self.playback_enabled: self.current_item.playSample()
            else: self.changeDir(self.current_item.text)
        
    def changeDir(self, path):
        self.clear()
        if path == "Recent":
            self.cwd_folders = ['..']
            self.cwd_files = config['Recent'][::-1]
            self.drawContents()
            self.path_updated.emit('Recent')
        else:
            prev_folder = os.path.basename(os.getcwd()) \
                    if os.path.abspath(path) == os.path.dirname(os.getcwd()) \
                    else None
            os.chdir(path)
            self.cwd_folders, self.cwd_files = self.getContents()
            index = self.cwd_folders.index(prev_folder) \
                    if prev_folder \
                    else 1
            self.drawContents(index)
            self.path_updated.emit(os.getcwd())

    def drawContents(self, curr_index=1):
        for entry in self.cwd_folders:
            entry_item = listItem(entry, False)
            self.addItem(entry_item)
        for entry in self.cwd_files:
            entry_item = listItem(entry, True)
            self.addItem(entry_item)

        if not self.selectedItems():
            self.setCurrentRow(curr_index)
            self.current_item = self.item(curr_index)

    def isAudio(self, a_file):
        exts = ['wav', 'mp3', 'ogg', 'flac', 'm4a']
        if os.path.splitext(a_file)[1].lower()[1:] in exts:
            return True
        return False

    def getContents(self):
        entries = os.listdir(os.getcwd())
        entries = [i for i in entries if not i.startswith('.')]
        dir_list = ['..']
        file_list = []
        for entry in entries:
            if os.path.isdir(entry):
                dir_list.append(entry)
            elif os.path.isfile(entry):
                if self.isAudio(entry):
                    file_list.append(entry)
        dir_list.sort(key=str.lower)
        file_list.sort(key=str.lower)

        return dir_list, file_list

    def enablePlayback(self, state):
        config['Play'] = state
        self.playback_enabled = state

# remnants of the qgraphicsview
#    # def paint(self, painter, option, widget=None):
#    #     QtGui.QGraphicsView.paint(self, painter, paint_option, widget)

class inputWidget(QtGui.QComboBox):
    path_updated = QtCore.pyqtSignal(str)
    tab_pressed = QtCore.pyqtSignal()
    esc_pressed = QtCore.pyqtSignal()

    def __init__(self):
        QtGui.QComboBox.__init__(self)
        self.setEditable(True)
        self.setInsertPolicy(QtGui.QComboBox.NoInsert)
        self.addItems(config['Places'])
        self.addItem('Recent')
        self.resize()
        self.activated.connect(self.updatePath)

    def updatePath(self, index):
        self.path_updated.emit(self.currentText())

    def event(self, event):
        if event.type() == QtCore.QEvent.KeyPress:
            if event.key() == QtCore.Qt.Key_Tab:
                self.tab_pressed.emit()
                return True
            elif event.key() == QtCore.Qt.Key_Escape:
                self.setEditText(self.prev_text)
                self.esc_pressed.emit()
                return True
        return QtGui.QComboBox.event(self, event)

    def keyPressEvent(self, event):
        QtGui.QComboBox.keyPressEvent(self, event)
        if event.key() == QtCore.Qt.Key_Return:
            if os.path.isdir(self.currentText()):
                self.path_updated.emit(self.currentText())
                self.esc_pressed.emit()

    def focusInEvent(self, event):
        self.prev_text = self.currentText()
        QtGui.QComboBox.focusInEvent(self, event)

    def resize(self):
        font = QtGui.QFontMetrics(self.font())
        max_width = 40 + max((font.width(place) for place in config['Places']))
        self.view().setMinimumWidth(max_width)

class mainWindow(QtGui.QWidget):

    def __init__(self):
        QtGui.QWidget.__init__(self)
        # self.setAttribute(QtCore.Qt.WA_AcceptTouchEvents)
        self.setWindowFlags(QtCore.Qt.Dialog)
        self.setWindowTitle('Surplus')

        self._initWidgets()
        self._initFilesTab()
        self._initPluginsTab()
        self._initMainLayout()

        self.addTab(self.tab1, "browser")
        self.addTab(self.tab2, "plugins")

        self._initConnections()
        self.files.setFocus()

    def _initWidgets(self):
        self.widgetStack = QtGui.QStackedWidget()

        self.tabBar = QtGui.QTabBar()
        self.tabBar.currentChanged.connect(self.widgetStack.setCurrentIndex)
        self.tabBar.setShape(QtGui.QTabBar.RoundedWest)
        self.tabBar.updateGeometry()
        
        self.scrollBar = QtGui.QScrollBar()
        self.scrollBar.rangeChanged.connect(self.scrollHide)
        self.blank = QtGui.QWidget()
        self.blank.hide()

        self.placesButton = QtGui.QPushButton("+")
        self.placesButton.sizeHint = self.placesButtonSizeHint

        self.tabLayoutBox = QtGui.QVBoxLayout()
        self.tabLayoutBox.setContentsMargins(0,0,0,0)
        self.tabLayoutBox.setSpacing(0)
        self.tabLayoutBox.setMargin(0)
        self.tabLayoutBox.setAlignment(QtCore.Qt.AlignLeft)
        self.tabLayoutBox.addWidget(self.placesButton)
        self.tabLayoutBox.addWidget(self.tabBar)
        self.tabLayoutBox.addWidget(self.scrollBar)
        self.tabLayoutBox.addWidget(self.blank)

    def _initMainLayout(self):
        mainHBox = QtGui.QHBoxLayout()
        mainHBox.setContentsMargins(0,0,0,0)
        mainHBox.setMargin(0)
        mainHBox.setSpacing(0)
        mainHBox.addLayout(self.tabLayoutBox)
        mainHBox.addWidget(self.widgetStack)

        mainVBox = QtGui.QVBoxLayout()
        mainVBox.addWidget(self.inputBox)
        mainVBox.addLayout(mainHBox)
        self.setLayout(mainVBox)

    def _initFilesTab(self):
        self.tab1 = QtGui.QWidget()
        self.inputBox = inputWidget()
        self.inputBox.setFrame(QtGui.QFrame.NoFrame)
        self.files = fileList(config['Default Folder'])
        self.files.setVerticalScrollBar(self.scrollBar)

        self.playCheck = QtGui.QCheckBox()
        self.waveRect = playView()
        self.waveRect.setMaximumHeight(20)
        self.waveRect.setFrameShape(QtGui.QFrame.NoFrame)
        hBox = QtGui.QHBoxLayout()
        hBox.addWidget(self.playCheck)
        hBox.addWidget(self.waveRect)

        tab1Layout = QtGui.QVBoxLayout()
        tab1Layout.setContentsMargins(0, 0, 0, 0)
        tab1Layout.setSpacing(0)
        tab1Layout.setMargin(0)
        tab1Layout.addWidget(self.files)
        tab1Layout.addLayout(hBox)
        self.tab1.setLayout(tab1Layout)

    def _initPluginsTab(self):
        self.tab2 = QtGui.QWidget()


    def _initConnections(self):
        self.files.tab_pressed.connect(self.switchTabs)
        self.files.slash_pressed.connect(self.focusPath)
        self.inputBox.tab_pressed.connect(self.switchTabs)
        self.inputBox.esc_pressed.connect(self.focusList)

        self.files.path_updated.connect(self.updatePath)
        self.inputBox.path_updated.connect(self.updateList)
        self.files.path_updated.emit(config['Default Folder'])

        self.files.sample_selected.connect(self.waveRect.loadFile)
        self.playCheck.stateChanged.connect(self.files.enablePlayback)

        if config['Play']:
            self.playCheck.setChecked(True)
            self.playCheck.stateChanged.emit(QtCore.Qt.Checked)
        else:
            self.playCheck.setChecked(False)
            self.playCheck.stateChanged.emit(QtCore.Qt.Unchecked)

        self.placesButton.clicked.connect(self.modifyPlaces)

    def updateButton(self, text):
        if os.path.realpath(os.path.abspath(text)) == \
                os.path.realpath(os.path.abspath(config['Default Folder'])) or \
                text == 'Recent':
            self.placesButton.setEnabled(False)
            return
        self.placesButton.setEnabled(True)
        path = os.path.realpath(os.path.abspath(text))
        places = (os.path.realpath(sym) for sym in config['Places'])
        text = '-' if path in places else '+'
        self.placesButton.setText(text)

    def modifyPlaces(self):
        path = os.getcwd()
        places = [os.path.realpath(sym) for sym in config['Places']]
        if path in places:
            self.inputBox.removeItem(places.index(path))
            config['Places'].pop(places.index(path))
            self.placesButton.setText('+')
        else:
            config['Places'].append(path)
            self.inputBox.insertItem(config['Places'].index(path), path)
            self.placesButton.setText('-')
        self.inputBox.resize()

    def scrollHide(self, a, b):
        if a==b and not self.scrollBar.isHidden():
            self.scrollBar.hide()
            self.blank.show()
        elif self.scrollBar.isHidden():
            self.scrollBar.show()
            self.blank.hide()

    def addTab(self, widget, name):
        self.widgetStack.addWidget(widget)
        self.tabBar.addTab(name)

    def sizeHint(self):
        return QtCore.QSize(220, 500)

    def placesButtonSizeHint(self):
        return QtCore.QSize(20,20)


    #def event(self, event):
    #    if type(event) == QtGui.QKeyEvent:
    #        if event.key() == QtCore.Qt.Key_Tab: #not working
    #            print self.focusWidget()
    #    return QtGui.QTabWidget.event(self, event)


    def switchTabs(self): self.tabBar.setCurrentIndex((self.currentIndex()+1) % self.count())

    def focusList(self): self.files.setFocus(QtCore.Qt.ShortcutFocusReason)

    def focusPath(self): self.inputBox.setFocus(QtCore.Qt.ShortcutFocusReason)

    def updatePath(self, text):
        self.inputBox.setEditText(text)
        self.updateButton(str(text).strip())

    def updateList(self, text): 
        self.files.changeDir(str(text).strip())
        self.updateButton(str(text).strip())

    # def touchEvent(self, event):
    #     if event == QtGui.QTouchEvent.TouchScreen:
    #         print 'ok'

if __name__ == '__main__':
    for sig in [signal.SIGTERM, signal.SIGINT, signal.SIGHUP, signal.SIGQUIT]:
        signal.signal(sig, handler)
    app = QtGui.QApplication(sys.argv)

    with open(config['Stylesheet'], 'r') as content_file:
        content = content_file.read()
    stylesheet = QtCore.QLatin1String(content)
    app.setStyleSheet(stylesheet)
    app.aboutToQuit.connect(handler)

    main = mainWindow()
    main.show()

    timer = QtCore.QTimer()
    timer.start(500)
    timer.timeout.connect(lambda: None)
    sys.exit(app.exec_())
