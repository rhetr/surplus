#!/usr/bin/env python

'''
surplus
'''
import sys
import os
import subprocess
import signal
import datetime
from multiprocessing import Process, Queue
from PyQt4 import QtGui, QtCore
from peaks import *

style_file = 'style.qss'
default_audio_dir = os.path.expanduser('~') +'/audio/sounds/drum sounds/'
line_height = 20

exts = ['wav', 'mp3', 'ogg', 'flac', 'm4a']


def getLength(a_file):
    x = [FFMPEG_BIN, '-i', str(a_file)]
    try:
        output = subprocess.check_output(x, stderr=subprocess.STDOUT)
    except Exception, e:
        output = str(e.output)
    finished = output.split('\n')
    for line in finished:
        if "Duration" in line:
            finished = line
            break
    return datetime.datetime.strptime(
        finished.split()[1][:-1], '%H:%M:%S.%f'
        ).time()


def play(a_file):
    return subprocess.Popen(['play', '-q', a_file],
                            stdout=subprocess.PIPE,
                            preexec_fn=os.setsid)


class playView(QtGui.QGraphicsView):
    def __init__(self):
        QtGui.QGraphicsView.__init__(self)
        self.setBackgroundBrush(QtGui.QColor(50, 50, 50))

        clearpen = QtGui.QPen(QtGui.QColor(0, 0, 0, 0))

        self.scene = QtGui.QGraphicsScene(self)
        self.item = QtGui.QGraphicsLineItem(0, 0, 0, 20)
        self.rect = QtGui.QGraphicsRectItem(0, 0, 100, 20)
        self.rect.setPen(clearpen)
        self.path = None
        self.scene.addItem(self.item)
        self.scene.addItem(self.rect)
        self.setScene(self.scene)
        self.setAlignment(QtCore.Qt.AlignLeft)

    def mil(self, length):
        return length.hour*3.6e6 + \
            length.minute * 6e4 + \
            length.second * 1000 + \
            length.microsecond * .001

    def loadFile(self, a_file):
        if self.path:
            self.scene.removeItem(self.path)
            self.path = None
        if a_file:
            length = self.mil(getLength(a_file))
            if length < 30e3:
                thread = waveThread(a_file)
                thread.finished.connect(self.loadWave)
                thread.start()

    def loadWave(self, arr):
        self.path = waveForm(arr)
        clearpen = QtGui.QPen(QtGui.QColor(50, 102, 150))
        self.path.setPen(clearpen)
        self.scene.addItem(self.path)

        # self.tl = QtCore.QTimeLine(length)
        # self.tl.setFrameRange(0, length/10)
        # self.a = QtGui.QGraphicsItemAnimation()
        # self.a.setItem(self.item)
        # self.a.setTimeLine(self.tl)

        # self.a.setPosAt(1, QtCore.QPointF(100, 0))

    def animate(self):
        self.tl.start()


class listItem(QtGui.QGraphicsRectItem):

    def __init__(self, text, is_file=True):
        QtGui.QGraphicsRectItem.__init__(self, 0, 0, 180, line_height)
        self.is_file = is_file
        self.setFlag(QtGui.QGraphicsItem.ItemIsSelectable)

        clearpen = QtGui.QPen(QtGui.QColor(0, 0, 0, 0))
        self.setPen(clearpen)
        self.text = text
        the_text = text[:20]+'...' if len(text) > 23 else text
        the_text += '/' if not is_file else ''
        self.label = QtGui.QGraphicsSimpleTextItem(the_text, parent=self)
        self.label.setPos(10, 5)
        self.label.setBrush(QtCore.Qt.white)
        font = QtGui.QFont()
        font.setPointSize(9)
        # font = QtGui.QFont("Source Sans Pro")
        # if not is_file:
        #     font.setPointSize(8)
        #     font.setBold(True)
        self.label.setFont(font)
        self.playing = None

    def paint(self, painter, option, widget=None):
        paint_option = option
        paint_option.state &= ~QtGui.QStyle.State_Selected
        QtGui.QGraphicsRectItem.paint(self, painter, paint_option, widget)

    def playSample(self):
        if self.playing:
            os.killpg(self.playing.pid, signal.SIGTERM)
        self.playing = play(self.text)

    def setSelected(self, selected):
        QtGui.QGraphicsRectItem.setSelected(self, selected)
        if selected:
            # self.scene().parent.ensureVisible(self, xMargin=-50)
            self.setBrush(QtGui.QColor(50, 102, 150))
            if self.is_file:
                self.playSample()
        else:
            self.setBrush(QtGui.QColor(50, 50, 50))
            if self.playing:
                os.killpg(self.playing.pid, signal.SIGTERM)

    def mousePressEvent(self, event):
        # QtGui.QPushButton.mousePressEvent(self, event)
        if not self.isSelected():
            for item in self.scene().selectedItems():
                item.setSelected(False)
            self.setSelected(True)
        elif self.is_file:
            self.playSample()

    def mouseMoveEvent(self, event):
        if self.is_file:
            mimeData = QtCore.QMimeData()
            # path = os.path.abspath(str(self.text))
            mimeData.setUrls(
                [QtCore.QUrl.fromLocalFile(
                    os.path.abspath(str(self.text)))])

            # view = self.scene().views()[0]
            # sceneP = self.mapToScene(self.boundingRect().bottomRight())
            # viewP = view.mapFromScene(sceneP)
            # wpos = view.viewport().mapToGlobal(viewP)

            # wpos = self.pos().toPoint()
            # wrect = self.boundingRect().toRect()
            # wrect.moveBottomLeft(wpos)
            # pixmap = QtGui.QPixmap.grabWidget(event.widget(), wrect)

            # painter = QtGui.QPainter(pixmap)
            # painter.setCompositionMode(painter.CompositionMode_DestinationIn)
            # painter.fillRect(pixmap.rect(), QtGui.QColor(0, 0, 0, 127))
            # painter.end()

            drag = QtGui.QDrag(event.widget())
            drag.setMimeData(mimeData)
            # drag.setPixmap(pixmap)
            # drag.setHotSpot(event.widget().pos())
            drag.exec_(QtCore.Qt.CopyAction)

    def mouseReleaseEvent(self, event):
        if not self.is_file:
            self.scene().changeDir(self.text)


class fileList(QtGui.QGraphicsScene):
    path_updated = QtCore.pyqtSignal(str)
    sample_playing = QtCore.pyqtSignal(bool)
    sample_selected = QtCore.pyqtSignal(str)

    def __init__(self, path, parent=None):
        QtGui.QGraphicsScene.__init__(self, parent)
        self.parent = parent
        self.setBackgroundBrush(QtGui.QColor(50, 50, 50))

        self.items = []
        self.prev_dir = None
        self.cwd = None
        self.changeDir(path)
        self.file_selected = None

    def event(self, event):
        if self.selectedItems():
            curr_selected = self.selectedItems()[0]
            if curr_selected.is_file and self.file_selected != curr_selected:
                self.file_selected = curr_selected
                self.sample_selected.emit(self.file_selected.text)
            elif not curr_selected.is_file:
                self.file_selected = None
                self.sample_selected.emit('')
        return QtGui.QGraphicsScene.event(self, event)

    def keyPressEvent(self, event): #NOQA
        # QtGui.QGraphicsScene.keyPressEvent(self, event)
        if type(event) == QtGui.QKeyEvent:

            if event.key() == QtCore.Qt.Key_Up:
                if not self.selectedItems():
                    self.items[1].setSelected(True)
                elif 0 == self.items.index(self.selectedItems()[0]):
                    self.items[0].setSelected(True)
                else:
                    cursel = self.items.index(self.selectedItems()[0])
                    self.items[cursel].setSelected(False)
                    self.items[cursel-1].setSelected(True)

            elif event.key() == QtCore.Qt.Key_Down:
                if not self.selectedItems():
                    self.items[0].setSelected(True)
                elif len(self.items)-1 == \
                        self.items.index(self.selectedItems()[0]):
                    pass
                else:
                    cursel = self.items.index(self.selectedItems()[0])
                    self.items[cursel].setSelected(False)
                    self.items[cursel+1].setSelected(True)
            elif event.key() == QtCore.Qt.Key_Home:
                    cursel = self.items.index(self.selectedItems()[0])
                    self.items[cursel].setSelected(False)
                    self.items[1].setSelected(True)
            elif event.key() == QtCore.Qt.Key_End:
                    cursel = self.items.index(self.selectedItems()[0])
                    self.items[cursel].setSelected(False)
                    self.items[-1].setSelected(True)

            # TODO ensure_visible prev_dir but it has to be searched by label
            elif event.key() == QtCore.Qt.Key_Left:
                # self.prev_dir = self.cwd
                self.changeDir('..')
            elif event.key() == QtCore.Qt.Key_Right:
                if not self.selectedItems()[0].is_file:
                    # self.prev_dir = self.selectedItems()[0].text
                    self.changeDir(self.selectedItems()[0].text)
            elif event.key() == QtCore.Qt.Key_Return:
                if not self.selectedItems()[0].is_file:
                    self.changeDir(self.selectedItems()[0].text)
                else:
                    self.selectedItems()[0].playSample()
            elif event.key() == QtCore.Qt.Key_Space:
                if self.selectedItems()[0].is_file:
                    self.selectedItems()[0].playSample()

    def clean(self):
        # self.clear()
        if self.items:
            for item in self.items:
                self.removeItem(item)

    def changeDir(self, path):
        self.clean()
        self.prev_dir = self.cwd[:-1] if self.cwd else None
        self.cwd = path
        os.chdir(path)
        self.cwd_folders, self.cwd_files = self.getContents()
        self.drawContents()
        self.path_updated.emit(os.getcwd())

    def drawContents(self):
        # view = self.views() if self.views() else self.parent
        c = 0
        self.items = []
        for entry in self.cwd_folders:
            entry_rect = listItem(entry, False)
            entry_rect.setPos(0, line_height+c*line_height)
            self.addItem(entry_rect)
            self.items.append(entry_rect)
            if entry == self.prev_dir:
                # self.parent.ensureVisible(entry_rect, xMargin=-50)
                entry_rect.setSelected(True)
            c += 1
        for entry in self.cwd_files:
            entry_rect = listItem(entry, True)
            entry_rect.setPos(0, line_height+c*line_height)
            self.addItem(entry_rect)
            self.items.append(entry_rect)
            c += 1

        if not self.selectedItems():
            self.items[1].setSelected(True)
            #print self.items[1].text

        rect = self.itemsBoundingRect()
        self.parent.setSceneRect(rect)
        #print self.parent.v_bar.value()
        self.parent.v_bar.setValue(0)
        #print self.parent.v_bar.value()

    def isAudio(self, a_file):
        if os.path.splitext(a_file)[1].lower()[1:] in exts:
            return True
        return False

    def getContents(self):
        entries = os.listdir(os.getcwd())
        entries = [i for i in entries if not i.startswith('.')]
        dir_list = ['..']
        file_list = []
        for entry in entries:
            if os.path.isdir(entry):
                dir_list.append(entry)
            elif os.path.isfile(entry):
                if self.isAudio(entry):
                    file_list.append(entry)
        dir_list.sort(key=str.lower)
        file_list.sort(key=str.lower)

        return dir_list, file_list


class fileBrowser(QtGui.QGraphicsView):
    '''the file browser'''

    tab_pressed = QtCore.pyqtSignal()
    slash_pressed = QtCore.pyqtSignal()

    def __init__(self, path=os.path.expanduser("~")):
        QtGui.QGraphicsView.__init__(self)
        self.v_bar = self.verticalScrollBar()
        self.scene = fileList(path, self)
        self.setScene(self.scene)
        # self.scrollBar = QtGui.QScrollBar(self)
        # self.scrollBar.move(QtCore.QPoint(-20,-20))
        # self.setVerticalScrollBar(self.scrollBar)
        # self.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)
        self.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)
        self.setAlignment(QtCore.Qt.AlignLeft | QtCore.Qt.AlignTop)
        # self.scrollBar.move(100, 100)

    # def paint(self, painter, option, widget=None):
    #     QtGui.QGraphicsView.paint(self, painter, paint_option, widget)

    def event(self, event):
        if event.type() == QtCore.QEvent.KeyPress:
                if event.key() == QtCore.Qt.Key_Tab:
                    self.tab_pressed.emit()
                    return True
                elif event.key() == QtCore.Qt.Key_Slash:
                    self.slash_pressed.emit()
                    return True
        return QtGui.QGraphicsView.event(self, event)


class pathLister(QtGui.QComboBox):
    path_updated = QtCore.pyqtSignal(str)
    tab_pressed = QtCore.pyqtSignal()
    esc_pressed = QtCore.pyqtSignal()

    def __init__(self):
        QtGui.QLineEdit.__init__(self)
        self.setEditable(True)

    def event(self, event):
        if event.type() == QtCore.QEvent.KeyPress:
            if event.key() == QtCore.Qt.Key_Tab:
                self.tab_pressed.emit()
                return True
            elif event.key() == QtCore.Qt.Key_Escape:
                self.setEditText(self.prev_text)
                self.esc_pressed.emit()
                return True
        return QtGui.QComboBox.event(self, event)

    def keyPressEvent(self, event):
        QtGui.QComboBox.keyPressEvent(self, event)
        if event.key() == QtCore.Qt.Key_Return:
            if os.path.isdir(self.currentText()):
                self.path_updated.emit(self.currentText())
                self.esc_pressed.emit()

    def focusInEvent(self, event):
        self.prev_text = self.currentText()
        QtGui.QComboBox.focusInEvent(self, event)


class mainWindow(QtGui.QTabWidget):

    def __init__(self):
        QtGui.QTabWidget.__init__(self)
        # self.setAttribute(QtCore.Qt.WA_AcceptTouchEvents)
        self.setWindowFlags(QtCore.Qt.Dialog)

        self.tab1 = QtGui.QWidget()
        self.filePath = pathLister()
        self.filePath.setFrame(QtGui.QFrame.NoFrame)
        self.files = fileBrowser(default_audio_dir)
        self.files.setFrameShape(QtGui.QFrame.NoFrame)

        self.playCheck = QtGui.QCheckBox()
        self.waveRect = playView()
        self.waveRect.setMaximumHeight(50)
        self.waveRect.setFrameShape(QtGui.QFrame.NoFrame)
        hBox = QtGui.QHBoxLayout()
        hBox.addWidget(self.playCheck)
        hBox.addWidget(self.waveRect)

        tab1Layout = QtGui.QVBoxLayout()
        tab1Layout.setSpacing(0)
        tab1Layout.setMargin(0)
        tab1Layout.setContentsMargins(0, 0, 0, 0)
        tab1Layout.addWidget(self.filePath)
        tab1Layout.addWidget(self.files)
        tab1Layout.addLayout(hBox)
        self.tab1.setLayout(tab1Layout)

        self.tab2 = QtGui.QWidget()
        # self.pluginSearch = QtGui.QLineEdit()
        # self.pluginSearch.setText('search...')
        # self.files1 = fileBrowser(default_audio_dir)
        # self.files1.setFrameShape(QtGui.QFrame.NoFrame)

        # tab2Layout = QtGui.QVBoxLayout()
        # tab2Layout.setSpacing(0)
        # tab2Layout.setMargin(0)
        # tab2Layout.setContentsMargins(0, 0, 0, 0)
        # tab2Layout.addWidget(self.files1)
        # self.tab2.setLayout(tab2Layout)

        self.addTab(self.tab1, "browser")
        self.addTab(self.tab2, "plugins")
        self.setTabPosition(QtGui.QTabWidget.West)
        self.setTabIcon(0, QtGui.QIcon.fromTheme("edit-undo"))
        self.setIconSize(QtCore.QSize(35, 35))

        self.setWindowTitle('Surplus')
        self.files.setFocus()

        # connections
        # self.playCheck.stateChanged.connect(


        self.files.tab_pressed.connect(self.switchTabs)
        self.files.slash_pressed.connect(self.focusPath)
        self.filePath.tab_pressed.connect(self.switchTabs)
        self.filePath.esc_pressed.connect(self.focusList)
        # self.files1.tab_pressed.connect(self.switchTabs)
        # self.files1.slash_pressed.connect(self.focusPath)

        self.files.scene.path_updated.connect(self.updatePath)
        self.filePath.path_updated.connect(self.updateList)
        self.files.scene.path_updated.emit(default_audio_dir)

        self.files.scene.sample_selected.connect(self.waveRect.loadFile)

    def switchTabs(self):
        self.setCurrentIndex((self.currentIndex()+1) % self.count())

    def focusList(self):
        self.currentWidget().focusNextChild()

    def focusPath(self):
        self.currentWidget().focusPreviousChild()

    def updatePath(self, text):
        self.filePath.setEditText(text)

    def updateList(self, text):
        self.files.scene.changeDir(text)

    # def touchEvent(self, event):
    #     if event == QtGui.QTouchEvent.TouchScreen:
    #         print 'ok'

if __name__ == '__main__':
    app = QtGui.QApplication(sys.argv)

    with open(style_file, 'r') as content_file:
        content = content_file.read()
    stylesheet = QtCore.QLatin1String(content)
    app.setStyleSheet(stylesheet)

    tabs = mainWindow()

    tabs.show()
    sys.exit(app.exec_())
    subprocess.call(['pkill', 'play'])
