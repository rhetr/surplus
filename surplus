#!/usr/bin/env python

'''
surplus
'''
import sys
import os
import subprocess
import signal
import datetime
from multiprocessing import Process, Queue
from PyQt4 import QtGui, QtCore
from peaks import *

style_file = 'style.qss'
default_audio_dir = os.path.expanduser('~') +'/audio/sounds/drum sounds/'
line_height = 20

exts = ['wav', 'mp3', 'ogg', 'flac', 'm4a']


def getLength(a_file):
    x = [FFMPEG_BIN, '-i', str(a_file)]
    try:
        output = subprocess.check_output(x, stderr=subprocess.STDOUT)
    except Exception, e:
        output = str(e.output)
    finished = output.split('\n')
    for line in finished:
        if "Duration" in line:
            finished = line
            break
    return datetime.datetime.strptime(
        finished.split()[1][:-1], '%H:%M:%S.%f'
        ).time()


def play(a_file):
    return subprocess.Popen(['play', '-q', a_file],
                            stdout=subprocess.PIPE,
                            preexec_fn=os.setsid)


class playView(QtGui.QGraphicsView):
    def __init__(self):
        QtGui.QGraphicsView.__init__(self)
        self.setBackgroundBrush(QtGui.QColor(34, 34, 34))
        self.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)
        self.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)


        self.scene = QtGui.QGraphicsScene(self)
        self.item = QtGui.QGraphicsLineItem(0, 0, 0, 20)
        self.rect = QtGui.QGraphicsRectItem(0, 0, 100, 20)
        self.rect.setPen(QtGui.QPen(QtGui.QColor(0, 0, 0, 0)))
        self.scene.addItem(self.item)
        self.scene.addItem(self.rect)
        self.setScene(self.scene)
        self.setAlignment(QtCore.Qt.AlignLeft)

        self.path = None

    def resizeEvent(self, event):
        self.fitInView(self.rect)
        QtGui.QGraphicsView.resizeEvent(self, event)

    def mil(self, length):
        return length.hour*3.6e6 + \
            length.minute * 6e4 + \
            length.second * 1000 + \
            length.microsecond * .001

    def loadFile(self, a_file):
        if self.path:
            self.scene.removeItem(self.path)
            self.path = None
        if a_file:
            length = self.mil(getLength(a_file))
            if length < 30e3:
                thread = waveThread(a_file)
                thread.finished.connect(self.loadWave)
                thread.start()

    def loadWave(self, arr):
        self.path = waveForm(arr)
        clearpen = QtGui.QPen(QtGui.QColor(50, 102, 150))
        self.path.setPen(clearpen)
        self.scene.addItem(self.path)

        # self.tl = QtCore.QTimeLine(length)
        # self.tl.setFrameRange(0, length/10)
        # self.a = QtGui.QGraphicsItemAnimation()
        # self.a.setItem(self.item)
        # self.a.setTimeLine(self.tl)

        # self.a.setPosAt(1, QtCore.QPointF(100, 0))

    def animate(self):
        self.tl.start()

class listItem(QtGui.QListWidgetItem):
    def __init__(self, text, is_file=True):
        QtGui.QListWidgetItem.__init__(self)
        self.is_file = is_file
        self.text = text
        self.text += '/' if not is_file else ''
        self.setText(self.text)
        self.currentItem = None
        self.prevItem = 0
        self.playing = None

    def playSample(self):
        if self.playing:
            os.killpg(self.playing.pid, signal.SIGTERM)
        self.playing = play(self.text)

class fileList(QtGui.QListWidget):
    tab_pressed = QtCore.pyqtSignal()
    slash_pressed = QtCore.pyqtSignal()
    path_updated = QtCore.pyqtSignal(str)
    sample_playing = QtCore.pyqtSignal(bool)
    sample_selected = QtCore.pyqtSignal(str)

    def __init__(self, path, parent=None):
        QtGui.QListWidget.__init__(self, parent)
        self.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)
        self.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)
        self.setDragDropMode(QtGui.QAbstractItemView.DragOnly)
        self.parent = parent

        self.currentItem = None
        self.select_flag = False
        self.changeDir(path)

        self.currentRowChanged.connect(self.itemSelected)
        self.itemClicked.connect(self.activatePressed)

    def mimeData(self, item):
        mimeData = QtCore.QMimeData()
        mimeData.setUrls( [QtCore.QUrl.fromLocalFile( os.path.abspath(str(item[0].text)))])
        return mimeData

    def keyPressEvent(self, event): #NOQA
        if type(event) == QtGui.QKeyEvent:
            #if event.key() == QtCore.Qt.Key_Tab: #not working
            #    self.tab_pressed.emit()
            #    return 1
            if event.key() == QtCore.Qt.Key_Slash:
                self.slash_pressed.emit()
            elif event.key() == QtCore.Qt.Key_K:
                event = QtGui.QKeyEvent(event.type(), QtCore.Qt.Key_Down, QtCore.Qt.NoModifier)
            elif event.key() == QtCore.Qt.Key_L:
                event = QtGui.QKeyEvent(event.type(), QtCore.Qt.Key_Up, QtCore.Qt.NoModifier)
            elif event.key() == QtCore.Qt.Key_Left \
                    or event.key() == QtCore.Qt.Key_J:
                self.changeDir('..')
            elif event.key() == QtCore.Qt.Key_Right \
                    or event.key() == QtCore.Qt.Key_Semicolon:
                if not self.currentItem.is_file:
                    self.changeDir(self.selectedItems()[0].text)
            elif event.key() == QtCore.Qt.Key_Return \
                    or event.key() == QtCore.Qt.Key_Space:
                if self.currentItem.is_file: self.currentItem.playSample()
                else: self.changeDir(self.currentItem.text)
        QtGui.QListWidget.keyPressEvent(self, event)

    def clean(self):
        self.clear()

    def itemSelected(self, row):
        self.currentItem = self.item(row)
        if self.currentItem and self.currentItem.is_file:
            self.sample_selected.emit(self.currentItem.text)
            self.currentItem.playSample()
        self.select_flag = True

    def activatePressed(self, item):
        if self.select_flag:
            self.select_flag = False
        elif self.currentItem:
            if self.currentItem.is_file: self.currentItem.playSample()
            else: self.changeDir(self.currentItem.text)
        
    def changeDir(self, path):
        self.clean()
        os.chdir(path)
        self.cwd_folders, self.cwd_files = self.getContents()
        self.drawContents()
        self.path_updated.emit(os.getcwd())

    def drawContents(self):
        # view = self.views() if self.views() else self.parent
        for entry in self.cwd_folders:
            entry_item = listItem(entry, False)
            self.addItem(entry_item)
        for entry in self.cwd_files:
            entry_item = listItem(entry, True)
            self.addItem(entry_item)

        if not self.selectedItems():
            self.setCurrentRow(1)
            self.currentItem = self.item(1)

    def isAudio(self, a_file):
        if os.path.splitext(a_file)[1].lower()[1:] in exts:
            return True
        return False

    def getContents(self):
        entries = os.listdir(os.getcwd())
        entries = [i for i in entries if not i.startswith('.')]
        dir_list = ['..']
        file_list = []
        for entry in entries:
            if os.path.isdir(entry):
                dir_list.append(entry)
            elif os.path.isfile(entry):
                if self.isAudio(entry):
                    file_list.append(entry)
        dir_list.sort(key=str.lower)
        file_list.sort(key=str.lower)

        return dir_list, file_list

# remnants of the qgraphicsview
#    # def paint(self, painter, option, widget=None):
#    #     QtGui.QGraphicsView.paint(self, painter, paint_option, widget)

class pathLister(QtGui.QComboBox):
    path_updated = QtCore.pyqtSignal(str)
    tab_pressed = QtCore.pyqtSignal()
    esc_pressed = QtCore.pyqtSignal()

    def __init__(self):
        QtGui.QLineEdit.__init__(self)
        self.setEditable(True)

    def event(self, event):
        if event.type() == QtCore.QEvent.KeyPress:
            if event.key() == QtCore.Qt.Key_Tab:
                self.tab_pressed.emit()
                return True
            elif event.key() == QtCore.Qt.Key_Escape:
                self.setEditText(self.prev_text)
                self.esc_pressed.emit()
                return True
        return QtGui.QComboBox.event(self, event)

    def keyPressEvent(self, event):
        QtGui.QComboBox.keyPressEvent(self, event)
        if event.key() == QtCore.Qt.Key_Return:
            if os.path.isdir(self.currentText()):
                self.path_updated.emit(self.currentText())
                self.esc_pressed.emit()

    def focusInEvent(self, event):
        self.prev_text = self.currentText()
        QtGui.QComboBox.focusInEvent(self, event)

class mainWindow(QtGui.QTabWidget):

    def __init__(self):
        QtGui.QTabWidget.__init__(self)
        # self.setAttribute(QtCore.Qt.WA_AcceptTouchEvents)
        self.setWindowFlags(QtCore.Qt.Dialog)

        self.tab1 = QtGui.QWidget()
        self.filePath = pathLister()
        self.filePath.setFrame(QtGui.QFrame.NoFrame)
        #self.files = fileBrowser(default_audio_dir)
        self.files = fileList(default_audio_dir)
        #self.files.setFrameShape(QtGui.QFrame.NoFrame)

        self.playCheck = QtGui.QCheckBox()
        self.waveRect = playView()
        self.waveRect.setMaximumHeight(50)
        self.waveRect.setFrameShape(QtGui.QFrame.NoFrame)
        hBox = QtGui.QHBoxLayout()
        hBox.addWidget(self.playCheck)
        hBox.addWidget(self.waveRect)

        tab1Layout = QtGui.QVBoxLayout()
        tab1Layout.setSpacing(0)
        tab1Layout.setMargin(0)
        tab1Layout.setContentsMargins(0, 0, 0, 0)
        tab1Layout.addWidget(self.filePath)
        tab1Layout.addWidget(self.files)
        tab1Layout.addLayout(hBox)
        self.tab1.setLayout(tab1Layout)

        self.tab2 = QtGui.QWidget()
        # self.pluginSearch = QtGui.QLineEdit()
        # self.pluginSearch.setText('search...')
        # self.files1 = fileBrowser(default_audio_dir)
        # self.files1.setFrameShape(QtGui.QFrame.NoFrame)

        # tab2Layout = QtGui.QVBoxLayout()
        # tab2Layout.setSpacing(0)
        # tab2Layout.setMargin(0)
        # tab2Layout.setContentsMargins(0, 0, 0, 0)
        # tab2Layout.addWidget(self.files1)
        # self.tab2.setLayout(tab2Layout)

        self.addTab(self.tab1, "browser")
        self.addTab(self.tab2, "plugins")
        self.setTabPosition(QtGui.QTabWidget.West)
        self.setTabIcon(0, QtGui.QIcon.fromTheme("edit-undo"))
        self.setIconSize(QtCore.QSize(35, 35))

        self.setWindowTitle('Surplus')
        self.files.setFocus()

        self.files.tab_pressed.connect(self.switchTabs)
        self.files.slash_pressed.connect(self.focusPath)
        self.filePath.tab_pressed.connect(self.switchTabs)
        self.filePath.esc_pressed.connect(self.focusList)

        self.files.path_updated.connect(self.updatePath)
        self.filePath.path_updated.connect(self.updateList)
        self.files.path_updated.emit(default_audio_dir)

        self.files.sample_selected.connect(self.waveRect.loadFile)


    #def event(self, event):
    #    if type(event) == QtGui.QKeyEvent:
    #        if event.key() == QtCore.Qt.Key_Tab: #not working
    #            print self.focusWidget()
    #    return QtGui.QTabWidget.event(self, event)


    def switchTabs(self): self.setCurrentIndex((self.currentIndex()+1) % self.count())

    def focusList(self): self.currentWidget().focusNextChild()

    def focusPath(self): self.currentWidget().focusPreviousChild()

    def updatePath(self, text): self.filePath.setEditText(text)

    def updateList(self, text): self.files.changeDir(text)

    # def touchEvent(self, event):
    #     if event == QtGui.QTouchEvent.TouchScreen:
    #         print 'ok'

if __name__ == '__main__':
    app = QtGui.QApplication(sys.argv)

    with open(style_file, 'r') as content_file:
        content = content_file.read()
    stylesheet = QtCore.QLatin1String(content)
    app.setStyleSheet(stylesheet)

    tabs = mainWindow()

    tabs.show()
    sys.exit(app.exec_())
    subprocess.call(['pkill', 'play'])
